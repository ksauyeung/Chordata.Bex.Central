<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WampSharp.WAMP1</name>
    </assembly>
    <members>
        <member name="T:WampSharp.V1.Core.Contracts.IWampServer`1">
            <summary>
            Contains all methods of WAMP server.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampAuxiliaryServer">
            <summary>
            Represents the auxiliary methods of a WAMP server.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampAuxiliaryServer.Prefix(WampSharp.V1.Core.Contracts.IWampClient,System.String,System.String)">
            <summary>
            A prefix message sent by a client in order to map curies.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="prefix">The prefix.</param>
            <param name="uri">The full uri.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampRpcServer`1">
            <summary>
            Contains the RPC methods of a WAMP server.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcServer`1.Call(WampSharp.V1.Core.Contracts.IWampClient,System.String,System.String,`0[])">
            <summary>
            Occurs when a client calls a rpc method.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="callId">An id of this call.</param>
            <param name="procUri">An uri representing the method to call.</param>
            <param name="arguments">The arguments of the method to call.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampPubSubServer`1">
            <summary>
            Contains the pub/sub methods of a WAMP server.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Subscribe(WampSharp.V1.Core.Contracts.IWampClient,System.String)">
            <summary>
            Occurs when a client subscribes to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client subscribed to.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Unsubscribe(WampSharp.V1.Core.Contracts.IWampClient,System.String)">
            <summary>
            Occurs when a client unsubscribes from a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client unsubscribed from.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0)">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0,System.Boolean)">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
            <param name="excludeMe">A value indicating whether to exclude the client from
            the recipients of the message.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0,System.String[])">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
            <param name="exclude">A collection of session ids of clients being excluded from the
            recipients of the event.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubServer`1.Publish(WampSharp.V1.Core.Contracts.IWampClient,System.String,`0,System.String[],System.String[])">
            <summary>
            Occurs when a client publishes an event to a topic uri.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="topicUri">The topic uri the client published to.</param>
            <param name="event">The event the client published.</param>
            <param name="exclude">A collection of session ids of clients being excluded from the
            recipients of the event.</param>
            <param name="eligible">A collection of session ids of the only clients that should not be exluded from the
            recipients of the event.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampAuxiliaryClient">
            <summary>
            Represents the auxiliary methods of a WAMP client.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampAuxiliaryClient.Welcome(System.String,System.Int32,System.String)">
            <summary>
            Server-to-client WELCOME message.
            </summary>
            <param name="sessionId">The client's session id.</param>
            <param name="protocolVersion">The WAMP protocol version the server speaks.</param>
            <param name="serverIdent">A string the server may use to disclose it's version, software, platform or identity.</param>
        </member>
        <member name="P:WampSharp.V1.Core.Contracts.IWampAuxiliaryClient.SessionId">
            <summary>
            Gets the given WAMP client's session id.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampClient">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampClient`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampClient`1">
            <summary>
            Contains all methods of WAMP client.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1">
            <summary>
            Contains the RPC methods of a WAMP client.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcClient`1.CallResult(System.String,`0)">
            <summary>
            Occurs when a call result arrives.
            </summary>
            <param name="callId">The call id.</param>
            <param name="result">The call result.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcClient`1.CallError(System.String,System.String,System.String)">
            <summary>
            Occurs when a call error arrives.
            </summary>
            <param name="callId">The call id.</param>
            <param name="errorUri">An uri to a page describing the error.</param>
            <param name="errorDesc">The error description.</param>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampRpcClient`1.CallError(System.String,System.String,System.String,`0)">
            <summary>
            Occurs when a call error arrives.
            </summary>
            <param name="callId">The call id.</param>
            <param name="errorUri">An uri to a page describing the error.</param>
            <param name="errorDesc">The error description.</param>
            <param name="errorDetails">An object representing error details.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1">
            <summary>
            Contains the pub/sub methods of a WAMP client.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Contracts.IWampPubSubClient`1.Event(System.String,`0)">
            <summary>
            Occurs when a new event is published to topic 
            the client is subscribed to.
            </summary>
            <param name="topicUri">The topic uri the current event is published to.</param>
            <param name="event">The current event.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampCraClient">
            <summary>
            Interface to data regarding a client that is authenticated (or being authenticated).
            </summary>
        </member>
        <member name="P:WampSharp.V1.Core.Contracts.IWampCraClient.CraAuthenticator">
            <summary>
            Interface to data regarding a client that is authenticated (or being authenticated).
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampRpcClient">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampPubSubClient">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Contracts.IWampServer">
            <summary>
            An object version of <see cref="T:WampSharp.V1.Core.Contracts.IWampServer`1"/>
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Curie.IWampCurieMapper">
            <summary>
            Maps prefixes to uris.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Curie.IWampCurieMapper.Resolve(System.String)">
            <summary>
            Resolves a compact uri by the current prefixes mapping.
            </summary>
            <param name="curie">The given compact uri.</param>
            <returns>The resolved uri.</returns>
        </member>
        <member name="M:WampSharp.V1.Core.Curie.IWampCurieMapper.Map(System.String,System.String)">
            <summary>
            Maps a prefix to a uri.
            </summary>
            <param name="prefix">The given prefix.</param>
            <param name="uri">The given uri.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Curie.WampCurieMapper">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Core.Curie.IWampCurieMapper"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            that is a bit specific to WAMPv1 (because of curies).
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer,WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V1.Core.Contracts.IWampClient})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <param name="outgoingSerializer">A <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>
            used to serialize message calls into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s</param>
            <param name="outgoingHandlerBuilder">An <see cref="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1"/> used to build
            a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/> per connection.</param>
            <param name="container">A <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> that contains all clients.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilderFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2"/>
            using <see cref="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilderFactory`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer,WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.ClientBuilder.WampClientBuilderFactory`1"/>.
            </summary>
            <param name="outgoingSerializer">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>
            used to serialize methods call to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="outgoingHandlerBuilder">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>
            used to create the <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/> used to
            handle outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.IWampSessionIdGenerator">
            <summary>
            Generates session ids for clients.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.IWampSessionIdGenerator.Generate">
            <summary>
            Generates a session id for a client.
            </summary>
            <returns>The generated session id.</returns>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.WampListener`1">
            <summary>
            A <see cref="T:WampSharp.Core.Listener.WampListener`2"/> that is
            WAMPv1 specific.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.WampListener`1.#ctor(WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0,WampSharp.V1.Core.Contracts.IWampClient},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V1.Core.Contracts.IWampClient})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.WampListener`1"/>
            </summary>
            <param name="listener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> used in order to 
            accept incoming connections.</param>
            <param name="handler">The <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/> used
            in order to dispatch incoming messages.</param>
            <param name="clientContainer">The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> use
            in order to store the connected clients.</param>
        </member>
        <member name="E:WampSharp.V1.Core.Listener.WampListener`1.SessionCreated">
            <summary>
            Occurs when a WAMP session is created.
            </summary>
        </member>
        <member name="E:WampSharp.V1.Core.Listener.WampListener`1.SessionClosed">
            <summary>
            Occurs when a WAMP session is closed.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.WampSessionEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for WAMP session events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.WampSessionEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.WampSessionEventArgs"/>.
            </summary>
            <param name="sessionId">The session id.</param>
        </member>
        <member name="P:WampSharp.V1.Core.Listener.WampSessionEventArgs.SessionId">
            <summary>
            The session id.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Listener.WampSessionIdGenerator">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Core.Listener.IWampSessionIdGenerator"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Core.Listener.WampSessionIdGenerator.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Core.Listener.WampSessionIdGenerator"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Core.Proxy.WampInterceptorSelector`1">
            <summary>
            An <see cref="T:Castle.DynamicProxy.IInterceptorSelector"/> that chooses between
            <see cref="T:WampSharp.Core.Proxy.WampOutgoingInterceptor`1"/> and 
            <see cref="T:WampSharp.V1.Core.Proxy.SessionIdPropertyInterceptor"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V1.Cra.IWampCraAuthenticator">
            <summary>
            Interface to data regarding a client that is authenticated (or being authenticated).
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.IWampCraAuthenticator.ClientSessionId">
            <summary>
            Gets the sessionId of the connected client.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.IWampCraAuthenticator.AuthKey">
            <summary>
            The authKey provided by the client during the WAMP-CRA authentication request.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.IWampCraAuthenticator.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user identified by AuthKey is successfully authenticated.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.IWampCraProcedures">
            <summary>
            Contract for v1 WAMP-CRA RPC Calls.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Cra.IWampCraProcedures.AuthReq(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            RPC endpoint for clients to initiate the authentication handshake.
            </summary>
            <param name="authKey">Authentication key, such as user name or application name.</param>
            <param name="extra">Extra data for salting the secret. Possible key values 'salt' (required,
            otherwise the secret is unsalted), 'iterations' (1000 default), and/or 'keylen' (32 default).</param>
            <returns>
            Authentication challenge. The client will need to create an authentication signature from
            this. The type WampCraChallenge can be deserialized from this.
            </returns>        
        </member>
        <member name="M:WampSharp.V1.Cra.IWampCraProcedures.Auth(System.String)">
            <summary>
            RPC endpoint for clients to actually authenticate after requesting authentication and
            computing a signature from the authentication challenge.
            </summary>
            <param name="signature">The signature.</param>
            <returns>
            A set of permissions the client is granted when authentication was successful.
            </returns>        
        </member>
        <member name="T:WampSharp.V1.Cra.MockWampCraProcedures">
            <summary>
            Mocked IWampCraProcedures for use in registering with the RpcMetadataCatalog.
            </summary>
            <seealso cref="T:WampSharp.V1.Cra.IWampCraProcedures"/>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraAuthenticator`1">
            <summary>
            WAMP-CRA is a cryptographically strong challenge response authentication protocol based on
            HMAC-SHA256. The protocol performs in-band authentication of WAMP clients to WAMP servers.
            WAMP-CRA does not introduce any new WAMP protocol level message types, but implements the
            authentication handshake via standard WAMP RPCs with well-known procedure URIs and signatures.
            </summary>
            <seealso cref="T:WampSharp.V1.Cra.IWampCraProcedures"/>
            <seealso cref="T:WampSharp.V1.Cra.IWampCraAuthenticator"/>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.#ctor(System.String,WampSharp.Core.Serialization.IWampFormatter{`0},WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog,WampSharp.V1.PubSub.Server.IWampTopicContainer)">
            <summary>
            Specialized constructor for use only by derived classes.
            </summary>
            <param name="clientSessionId">Identifier for the client session.</param>
            <param name="formatter">The formatter.</param>
            <param name="metadataCatalog">The metadata catalog.</param>
            <param name="topicContainer">The topic container.</param>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetAllRpcMethods">
            <summary>
            Gets all RPC methods in this collection.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process all RPC methods in this collection.
            </returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetTopicContainer">
            <summary>
            Gets topic container.
            </summary>
            <returns>The topic container.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.AuthReq(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            RPC endpoint for clients to initiate the authentication handshake.
            </summary>
            <seealso cref="M:WampSharp.Cra.IWampCraProcedures.AuthReq(string,IDictionary{string,string})"/>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.Auth(System.String)">
            <summary>
            RPC endpoint for clients to actually authenticate after requesting authentication and
            computing a signature from the authentication challenge.
            </summary>
            <seealso cref="M:WampSharp.Cra.IWampCraProcedures.Auth(string)"/>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetAuthSecret(System.String)">
            <summary>
            Gets the secret value for the supplied auth key used to hash the challenge.  Return null if
            the key is not found.
            </summary>
            <param name="authKey">Authentication key, such as a user name or application name.</param>
            <returns>The authentication secret.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.GetAuthPermissions(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Called to get the permissions the user identified by @authKey BEFORE the user is
            authenticated. A copy of the client's request 'extra' is provided, and you can alter it here.
            This will be passed back to the client as WampCraChallenge.extraAuth and MUST be what is
            actually used for generating the secret.
            </summary>
            <remarks>
            Here is a good place to check/fix something in @extra that is out of whack with the request,
            like capping the number of iterations, or specifying a different (stricter, presumably)
            salting mechanism. I really don't know or understand the purpose of sending available
            endpoints to an unauthenticated user.  These are only used as part of the challenge, and are
            regurgitated to you in OnAuthenticated. I see no reason why you have to return anything here
            (yes, null is fine), and you can do all the work in OnAuthenticated(), including returning
            the real list of permissions.
            </remarks>
            <param name="authKey">Authentication key, such as user name or application name.</param>
            <param name="extra">Extra data for salting the secret. Possible key values 'salt' (required,
            otherwise the secret is unsalted), 'iterations' (1000 default), and/or 'keylen' (32 default).
            You may change these here and the client must use this method of signing.</param>
            <returns>The permissions of the user if successfully authenticated.</returns>
        </member>
        <member name="M:WampSharp.V1.Cra.WampCraAuthenticator`1.OnAuthenticated(System.String,WampSharp.V1.Cra.WampCraPermissions)">
            <summary>
            Called after the user is successfully authenticated.  This call is the last opportunity for
            you to set the WampPermissions, as these will be used to determine rpc and pub/sub operations
            for the remainder of this session.
            </summary>
            <remarks>
            NOTE: Throwing an exception here could put you in a bad state.  We'll send an error to the
            client, and make them unauthenticated in this case.
            </remarks>
            <param name="authKey">Authentication key, such as user name or application name.</param>
            <param name="permissions">The permissions initially granted in the call to
            GetAuthPermissions(). You could change these, and the updated copy is what will be returned
            to the client from its call to auth().</param>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.AuthKey">
            <summary>
            The authKey provided by the client during the WAMP-CRA authentication request.
            </summary>
            <seealso cref="P:WampSharp.V1.Cra.IWampCraAuthenticator.AuthKey"/>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.ClientSessionId">
            <summary>
            Gets the sessionId of the connected client.
            </summary>
            <seealso cref="P:WampSharp.V1.Cra.IWampCraAuthenticator.ClientSessionId"/>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user identified by AuthKey is successfully authenticated.
            </summary>
            <seealso cref="P:WampSharp.V1.Cra.IWampCraAuthenticator.IsAuthenticated"/>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.IsAuthenticationPending">
            <summary>
            Gets a value indicating whether we are waiting for an auth call after an authreq.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.CraPermissionsMapper">
            <summary>
            Gets the permissions that were sent to the client following a successful authreq call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampCraAuthenticator`1.AllowAnonymous">
            <summary>
            Gets a value indicating whether we allow anonymous logins. An anonymous login is one where
            the authKey is null or an empty string.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraChallenge">
            <summary>
            This type is returned to the client from a call to IWampCra.authreq().  The client uses the
            JSON as sent in addition to the contents of authextra (if present) to sign the challenge.
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="T:WampSharp.V1.Cra.WampCraPermissions">
            <summary>
            This type is returned to the client from a successful call to IWampCra.auth().
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMetadata">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadata"/> using
            Reflection.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.IWampRpcMetadata">
            <summary>
            Represents hosted rpc service metadata.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadata.GetServiceMethods">
            <summary>
            Gets the methods of the current rpc service.
            </summary>
            <returns>The the methods of the current rpc service.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMetadata.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMetadata"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMethod"/> using <see cref="P:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.MethodInfo"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.IWampRpcMethod">
            <summary>
            Represents a hosted rpc service's method.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMethod.InvokeAsync(WampSharp.V1.Core.Contracts.IWampClient,System.Object[])">
            <summary>
            Invokes the method asynchronously.
            </summary>
            <param name="client">The <see cref="T:WampSharp.V1.Core.Contracts.IWampClient"/> making the call.</param>
            <param name="parameters">The parameters to invoke with.</param>
            <returns>A task representing the result.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMethod.Invoke(WampSharp.V1.Core.Contracts.IWampClient,System.Object[])">
            <summary>
            Invokes the method syncronously.
            </summary>
            <param name="client">The <see cref="T:WampSharp.V1.Core.Contracts.IWampClient"/> making the call. </param>
            <param name="parameters">The parameters to invoke with.</param>
            <returns>The result of the method.</returns>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.IWampRpcMethod.Name">
            <summary>
            The method's name.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.IWampRpcMethod.ProcUri">
            <summary>
            The method's proc uri.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.IWampRpcMethod.Parameters">
            <summary>
            The types of the method parameters.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.#ctor(System.Object,System.Reflection.MethodInfo,System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod"/>.
            </summary>
            <param name="instance">The instance that this method will use.</param>
            <param name="method">The <see cref="P:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.MethodInfo"/> this method wraps.</param>
            <param name="baseUri">The base uri of the method.</param>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.GetInstance(WampSharp.V1.Core.Contracts.IWampClient)">
            <summary>
            Gets the instance used for <see cref="!:System.Reflection.MethodInfo.Invoke(object, object[])"></see>
            call.
            </summary>
            <param name="client">The <see cref="T:WampSharp.V1.Core.Contracts.IWampClient"/> requesting this call.</param>
            <returns>The instance to use for invocation.</returns>
        </member>
        <member name="P:WampSharp.V1.Rpc.Server.MethodInfoWampRpcMethod.MethodInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> this rpc method
            is bound to.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.WampPubSubPermissions">
            <summary>
            Represents Publish and Subscribe permissions for a Topic URI or URI Prefix.
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="M:WampSharp.V1.Cra.WampPubSubPermissions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="uri">PubSub Topic URI / URI prefix.</param>
            <param name="prefix">URI matched by prefix?</param>
            <param name="pub">Allow to publish?</param>
            <param name="sub">Allow to subscribe?</param>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.uri">
            <summary>
            PubSub Topic URI / URI prefix.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.prefix">
            <summary>
            URI matched by prefix?
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.pub">
            <summary>
            Allow to publish?
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampPubSubPermissions.sub">
            <summary>
            Allow to subscribe?
            </summary>
        </member>
        <member name="T:WampSharp.V1.Cra.WampRpcPermissions">
            <summary>
            Represents RPC call permissions for an endpoint uri.
            </summary>
            <remarks>As this is defined as part of WAMP-CRA (v1), it should not be changed.</remarks>
        </member>
        <member name="M:WampSharp.V1.Cra.WampRpcPermissions.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="uri">RPC Endpoint URI.</param>
            <param name="call">Allow to call?</param>
        </member>
        <member name="P:WampSharp.V1.Cra.WampRpcPermissions.uri">
            <summary>
            RPC Endpoint URI.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Cra.WampRpcPermissions.call">
            <summary>
            Allow to call?
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.IWampPubSubClientFactory`1">
            <summary>
            An interface that allows to consume pub/sub client capabilities.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.IWampPubSubClientFactory`1.GetSubject``1(System.String,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a subject proxy of a given topic uri.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="topicUri">The given topic uri.</param>
            <param name="connection">The connection the messages are sent through.</param>
            <returns>The requested subject.</returns>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.IWampServerProxyFactory`1">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> proxy that handles
            <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.IWampServerProxyFactory`1.Create(WampSharp.V1.Core.Contracts.IWampPubSubClient{`0},WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> that its callbacks will be
            redirecte to a given <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>.
            </summary>
            <param name="client">The given <see cref="T:WampSharp.V1.Core.Contracts.IWampPubSubClient`1"/>.</param>
            <param name="connection">The connection to the proxy.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.WampPubSubClientFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Client.IWampPubSubClientFactory`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.WampPubSubClientFactory`1.#ctor(WampSharp.V1.PubSub.Client.IWampServerProxyFactory{`0},WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Client.WampPubSubClientFactory`1"/>.
            </summary>
            <param name="serverProxyFactory">The server proxy factory used to get callbacks.</param>
            <param name="formatter">The formatter used to serialize/deserialize messages.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.WampPubSubSubject`2">
            <summary>
            Represents a WAMP topic of a given topic uri.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.WampPubSubSubject`2.#ctor(System.String,WampSharp.V1.PubSub.Client.IWampServerProxyFactory{`0},WampSharp.Core.Listener.IWampConnection{`0},WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Client.WampPubSubSubject`2"/>.
            </summary>
            <param name="topicUri">The topic uri of the current topic.</param>
            <param name="serverProxyFactory">The server proxy factory used to get
            callbacks from the server.</param>
            <param name="connection">The underlying connection this subject uses
            in order to send/receive messages.</param>
            <param name="formatter">The formatter used in order to serialize/deserialize
            the messages sent.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Client.WampServerProxyFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Client.IWampServerProxyFactory`1"/> using
            <see cref="T:WampSharp.Core.Client.IWampServerProxyBuilder`3"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Client.WampServerProxyFactory`1.#ctor(WampSharp.Core.Client.IWampServerProxyBuilder{`0,WampSharp.V1.Core.Contracts.IWampPubSubClient{`0},WampSharp.V1.Core.Contracts.IWampServer})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Client.WampServerProxyFactory`1"/>.
            </summary>
            <param name="proxyBuilder">The <see cref="T:WampSharp.Core.Client.IWampServerProxyBuilder`3"/>
            used in order to create the server proxy.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for a new subscription.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for WAMP subscription events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs"/>.
            </summary>
            <param name="sessionId">The session id of the current subscriber.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampSubscriptionEventArgs.SessionId">
            <summary>
            The session id of the subscriber.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs.#ctor(System.String,System.IObserver{System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs"/>.
            </summary>
            <param name="sessionId">The session id of the subscribing client.</param>
            <param name="observer">A proxy to the subscribing client.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampSubscriptionAddEventArgs.Observer">
            <summary>
            A proxy to the subscribing client.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampSubscriptionRemoveEventArgs">
            <summary>
            Represnts <see cref="T:System.EventArgs"/> for WAMP subscription removal events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampSubscriptionRemoveEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampSubscriptionRemoveEventArgs"/>.
            </summary>
            <param name="sessionId">The session id of the removed subscriber.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicCreatedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an event that occurs when a new
            <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/> is created.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>
            creation/destruction events.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicEventArgs.#ctor(WampSharp.V1.PubSub.Server.IWampTopic)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicEventArgs"/>.
            </summary>
            <param name="topic">The relevant topic.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampTopicEventArgs.Topic">
            <summary>
            Gets the relevant topic.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicCreatedEventArgs.#ctor(WampSharp.V1.PubSub.Server.IWampTopic)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicCreatedEventArgs"/>.
            </summary>
            <param name="topic">The created topic.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicRemovedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/> destruction
            event.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicRemovedEventArgs.#ctor(WampSharp.V1.PubSub.Server.IWampTopic)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicRemovedEventArgs"/>.
            </summary>
            <param name="topic">The removed topic.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.IWampTopic">
            <summary>
            Represents a WAMP topic, that some clients are subscribed to.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopic.Unsubscribe(System.String)">
            <summary>
            Unsubscribes a subscriber given its session id from the topic.
            </summary>
            <param name="sessionId">The subscriber's session id.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopic.TopicUri">
            <summary>
            Gets the uri of the topic.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopic.Persistent">
            <summary>
            Gets a value indicating whether this topic is persistent.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopic.HasObservers">
            <summary>
            Gets a value indicating whether this topic has observers.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionAdding">
            <summary>
            Occurs when a new subscription is being added to the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionAdded">
            <summary>
            Occurs after a new subscription has been added to the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionRemoving">
            <summary>
            Occurs when a subscription is being removed from the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.SubscriptionRemoved">
            <summary>
            Occurs after a subscription has been removed from the topic.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopic.TopicEmpty">
            <summary>
            Occurs when the topic is empty.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.IWampTopicContainer">
            <summary>
            Represents a container for <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.CreateTopicByUri(System.String,System.Boolean)">
            <summary>
            Creates and adds a topic to the container given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
            <returns>The created topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.GetOrCreateTopicByUri(System.String,System.Boolean)">
            <summary>
            Gets or creates a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.GetTopicByUri(System.String)">
            <summary>
            Gets a topic given it uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainer.TryRemoveTopicByUri(System.String,WampSharp.V1.PubSub.Server.IWampTopic@)">
            <summary>
            Tries to remove a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="topic">The removed topic.</param>
            <returns>A value indicating whether the removal succeeded.</returns>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopicContainer.TopicUris">
            <summary>
            Gets the uris of the topics present in the container.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.IWampTopicContainer.Topics">
            <summary>
            Gets the topics currently present in the container.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopicContainer.TopicCreated">
            <summary>
            Occurs when a new topic is created.
            </summary>
        </member>
        <member name="E:WampSharp.V1.PubSub.Server.IWampTopicContainer.TopicRemoved">
            <summary>
            Occurs when a topic is removed.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1">
            <summary>
            A <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainer"/> with extra thread-safe
            functionality.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1.Subscribe(System.String,System.IObserver{System.Object})">
            <summary>
            Subscribes to a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="observer">The observer to subscribe to the topic with.</param>
            <returns>A disposable used to unsubscribe from the topic.</returns>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1.Unsubscribe(System.String,System.String)">
            <summary>
            Unsubscribes an observer from the topic given its session id.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="sessionId">The observer's session id.</param>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1.Publish(System.String,`0,System.String[],System.String[])">
            <summary>
            Publishes an event to a given topic.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="event">The event to publish.</param>
            <param name="exclude">An array of excluded subscribers' session ids.</param>
            <param name="eligible">An array of eligible subscribers' session ids.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampNotification">
            <summary>
            Represents a <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>'s publication.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampNotification.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampNotification"/>.
            </summary>
            <param name="event">The event to publish</param>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampNotification.#ctor(System.Object,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampNotification"/>.
            </summary>
            <param name="event">The event to publish</param>
            <param name="excluded">A collection of excluded observers' session ids.</param>
            <param name="eligible">A collection of eligible observers' session ids.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampNotification.Event">
            <summary>
            Gets the published event.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampNotification.Excluded">
            <summary>
            Gets a collection of excluded observers' session ids.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampNotification.Eligible">
            <summary>
            Gets a collection of eligible observers' session ids.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampObserver">
            <summary>
            Represents a proxy to a topic's subscriber.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampObserver.#ctor(System.String,WampSharp.V1.Core.Contracts.IWampClient)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampObserver"/>.
            </summary>
            <param name="topicUri">The uri of the topic the observer belongs to.</param>
            <param name="client">The proxy to the client.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampObserver.SessionId">
            <summary>
            Gets the session id of the client.
            </summary>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampObserver.Client">
            <summary>
            Gets a proxy to the client.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampPubSubServer`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampPubSubServer`1.#ctor(WampSharp.V1.PubSub.Server.IWampTopicContainerExtended{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampPubSubServer`1"/>.
            </summary>
            <param name="container">The <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1"/>
            the server will work against.</param>
        </member>
        <member name="P:WampSharp.V1.PubSub.Server.WampPubSubServer`1.TopicContainer">
            <summary>
            Gets the <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainer"/> this server works against.
            </summary>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopic">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Server.IWampTopic"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopic.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopic"/>.
            </summary>
            <param name="topicUri">The uri of the topic.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
        </member>
        <member name="T:WampSharp.V1.PubSub.Server.WampTopicContainer`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.PubSub.Server.IWampTopicContainerExtended`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.PubSub.Server.WampTopicContainer`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.PubSub.Server.WampTopicContainer`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.DynamicWampRpcClient">
            <summary>
            A dynamic rpc client. 
            Allows to call rpc methods without having a given interface.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.DynamicWampRpcClient.#ctor(WampSharp.V1.Rpc.Client.IWampRpcClientHandler,WampSharp.V1.Rpc.Client.IWampRpcSerializer)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.DynamicWampRpcClient"/>.
            </summary>
            <param name="clientHandler">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/>
            that will deal rpc calls.</param>
            <param name="serializer">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/> that will serialize
            RPC calls.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcMethodInfo">
            <summary>
            An implementation of <see cref="T:System.Reflection.MethodInfo"/> for
            <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/> and
            <see cref="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper"/>.
            </summary>
            <remarks>
            This class was written because I think that it is a better solution
            than creating a structure that describes methods or creating overloads
            for these interfaces that receive method name and return type.
            </remarks>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper">
            <summary>
            Maps WAMP RPC method calls to their corresponding
            uris.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampProcUriMapper.Map(System.Reflection.MethodInfo)">
            <summary>
            Maps the given method to its corresponding uri.
            </summary>
            <param name="method">The given method.</param>
            <returns>The method's corresponding uri.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1">
            <summary>
            An interface that allows to consume rpc client capabilities.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1.GetClient``1(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a proxy to the given interface on the given connection.
            </summary>
            <typeparam name="TProxy"></typeparam>
            <param name="connection">The given connection.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1.GetDynamicClient(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a dynamic proxy on the given connection.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler">
            <summary>
            Handles outgoing RPC calls.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientHandler.Handle(WampSharp.V1.Rpc.Client.WampRpcCall)">
            <summary>
            Handles synchronous rpc calls.
            </summary>
            <param name="rpcCall">The given rpc call.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientHandler.HandleAsync(WampSharp.V1.Rpc.Client.WampRpcCall)">
            <summary>
            Handles asynchronous rpc calls.
            </summary>
            <param name="rpcCall">The given rpc call.</param>
            <returns>The a task that represents result of the call.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1">
            <summary>
            Builds a <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/> given a connection.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1.Build(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Builds a <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/> given a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.
            </summary>
            <param name="connection">The given <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.</param>
            <returns>The built <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/>.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer">
            <summary>
            Serializes proxy method calls to <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampRpcSerializer.Serialize(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Serializes a proxy method call to a <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>.
            </summary>
            <param name="method">The called method.</param>
            <param name="arguments">The call arguments.</param>
            <returns>The serialized <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.IWampServerProxyFactory`1">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> proxy that handles
            <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.IWampServerProxyFactory`1.Create(WampSharp.V1.Core.Contracts.IWampRpcClient{`0},WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a <see cref="T:WampSharp.V1.Core.Contracts.IWampServer"/> that its callbacks will be
            redirecte to a given <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>.
            </summary>
            <param name="client">The given <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcClient`1"/>.</param>
            <param name="connection">The connection to the proxy.</param>
            <returns>The created proxy.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcCall">
            <summary>
            Represents a WAMP rpc call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.CallId">
            <summary>
            The call id of the this call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.ProcUri">
            <summary>
            The proc uri to call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.Arguments">
            <summary>
            The arguments sent with the call.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcCall.ReturnType">
            <summary>
            The expected return type of the call.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor">
            <summary>
            A base class interceptor for both synchronous and asynchronous
            rpc calls.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.#ctor(WampSharp.V1.Rpc.Client.IWampRpcSerializer,WampSharp.V1.Rpc.Client.IWampRpcClientHandler)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandlerBuilder`1"/>.
            </summary>
            <param name="serializer"></param>
            <param name="clientHandler"></param>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Implementation of <see cref="M:Castle.DynamicProxy.IInterceptor.Intercept(Castle.DynamicProxy.IInvocation)"/>.
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.Serializer">
            <summary>
            The serializer used in order to serialize method calls.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor.ClientHandler">
            <summary>
            The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/> use in order
            to handle serialized <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>s.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientFactory`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientFactory`1"/>
            using dynamic proxy.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientFactory`1.#ctor(WampSharp.V1.Rpc.Client.IWampRpcSerializer,WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientFactory`1"/>.
            </summary>
            <param name="serializer">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/> used
            in order to serialize RPC calls.</param>
            <param name="clientHandlerBuilder">The <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1"/>
            used in order to build the handler that handles the <see cref="T:WampSharp.V1.Rpc.Client.WampRpcCall"/>s.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandler"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1.#ctor(WampSharp.V1.Rpc.Client.IWampServerProxyFactory{`0},WampSharp.Core.Listener.IWampConnection{`0},WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientHandlerBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcClientHandlerBuilder`1"/>
            using <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcClientHandlerBuilder`1.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0},WampSharp.V1.Rpc.Client.IWampServerProxyFactory{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientHandler`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcClientInterceptorSelector">
            <summary>
            Selects the right <see cref="T:WampSharp.V1.Rpc.Client.WampRpcClientInterceptor"/> based
            on whether the method is synchronous or asynchronous.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcMethodAttributeProcUriMapper">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper"/> based on
            <see cref="T:WampSharp.V1.Rpc.WampRpcMethodAttribute"/>s.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcRequest">
            <summary>
            Represents a RPC request that is currently
            in progress.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcRequest.Task">
            <summary>
            A task used in order to notify when
            result arrived.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.Client.WampRpcRequest.Request">
            <summary>
            The original request.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampRpcSerializer">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampRpcSerializer"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampRpcSerializer.#ctor(WampSharp.V1.Rpc.Client.IWampProcUriMapper)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampRpcSerializer"/>.
            </summary>
            <param name="procUriMapper">A given <see cref="T:WampSharp.V1.Rpc.Client.IWampProcUriMapper"/>
            used in order to map called methods to their corresponding
            uris.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Client.WampServerProxyFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Client.IWampServerProxyFactory`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Client.WampServerProxyFactory`1.#ctor(WampSharp.Core.Client.IWampServerProxyBuilder{`0,WampSharp.V1.Core.Contracts.IWampRpcClient{`0},WampSharp.V1.Core.Contracts.IWampServer})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Client.WampServerProxyFactory`1"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog">
            <summary>
            Represents a catalog of hosted rpc services.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.Register(WampSharp.V1.Rpc.Server.IWampRpcMetadata)">
            <summary>
            Registers a new rpc service to the catalog
            given its metadata.
            </summary>
            <param name="metadata">The given service's metadata.</param>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.Unregister(WampSharp.V1.Rpc.Server.IWampRpcMethod)">
            <summary>
            Unregisters a rpc method from the catalog
            </summary>
            <param name="method">The given method to unregister.</param>
            <returns>A value indicating whether the method was removed 
            successfully.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.ResolveMethodByProcUri(System.String)">
            <summary>
            Maps a given proc uri to its corresponding metadata.
            </summary>
            <param name="procUri">The given proc uri.</param>
            <returns>The corresponding metadata.</returns>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog.GetAllRpcMethods">
            <summary>
            Gets all registered RPC methods.
            </summary>
            <returns>All registered RPC methods.</returns>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.ProcUriAlreadyMappedException">
            <summary>
            Indicates that a given proc uri is already mapped in
            <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.ProcUriAlreadyMappedException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V1.Rpc.Server.ProcUriAlreadyMappedException"/>.
            </summary>
            <param name="procUri">The given proc uri.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.WampRpcMetadataCatalog">
            <summary>
            An implementation of <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.WampRpcMetadataCatalog.#ctor">
            <summary>
            A default constructor.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.Server.WampRpcServer`1">
            <summary>
            An server-side implementation of <see cref="T:WampSharp.V1.Core.Contracts.IWampRpcServer`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V1.Rpc.Server.WampRpcServer`1.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0},WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.Rpc.Server.WampRpcServer`1"/>.
            </summary>
            <param name="formatter">The <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/>
            used in order to deserialize method arguments.</param>
            <param name="rpcMetadataCatalog">The <see cref="T:WampSharp.V1.Rpc.Server.IWampRpcMetadataCatalog"/>
            used in order to map calls to their corresponding methods.</param>
        </member>
        <member name="T:WampSharp.V1.Rpc.WampRpcCallException">
            <summary>
            An exception having details that will be sent
            through a CALLERROR WAMP message.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.WampRpcCallException.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.Rpc.WampRpcCallException"/>.
            </summary>
            <param name="errorUri"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorUri"/></param>
            <param name="errorDesc">The error description, <see cref="P:System.Exception.Message"/>.</param>
            <param name="errorDetails"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorDetails"/></param>
        </member>
        <member name="M:WampSharp.V1.Rpc.WampRpcCallException.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V1.Rpc.WampRpcCallException"/>.
            </summary>
            <param name="procUri"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ProcUri"/></param>
            <param name="callId"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.CallId"/></param>
            <param name="errorUri"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorUri"/></param>
            <param name="errorDesc">The error description, <see cref="P:System.Exception.Message"/>.</param>
            <param name="errorDetails"><see cref="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorDetails"/></param>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.ProcUri">
            <summary>
            The called method's proc uri.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.CallId">
            <summary>
            The call id of the WAMP CALL.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorUri">
            <summary>
            The error uri.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcCallException.ErrorDetails">
            <summary>
            The error details.
            </summary>
        </member>
        <member name="T:WampSharp.V1.Rpc.WampRpcMethodAttribute">
            <summary>
            Indicates a method is a WAMP rpc service method.
            </summary>
        </member>
        <member name="M:WampSharp.V1.Rpc.WampRpcMethodAttribute.#ctor(System.String)">
            <summary>
            Intializes a new instance of <see cref="T:WampSharp.V1.Rpc.WampRpcMethodAttribute"/>.
            </summary>
            <param name="procUri"></param>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcMethodAttribute.ProcUri">
            <summary>
            The proc uri of this method.
            </summary>
        </member>
        <member name="P:WampSharp.V1.Rpc.WampRpcMethodAttribute.IsRelative">
            <summary>
            Gets/sets a value indicating whether the proc uri is
            relative to a base uri or not.
            </summary>
        </member>
    </members>
</doc>
